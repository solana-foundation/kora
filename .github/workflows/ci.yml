name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  # Test environment configuration
  RPC_URL: http://127.0.0.1:8899
  TEST_SERVER_URL: http://127.0.0.1:8080
  KORA_PRIVATE_KEY: 64TVMxZyYyLHwyfZRJUJMqF8GJsMsZQKk4JhdKkyMB7k3fNUjWZdAF1YmyLd43dWEBLCLYjKDkoRGfMwMoGUrDF6
  KORA_CONFIG_FILE: kora.toml
  VALIDATOR_PORT: 8899
  KORA_RPC_PORT: 8080
  VALIDATOR_TIMEOUT: 60
  KORA_TIMEOUT: 30
  RUST_LOG: info

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: make check
      - name: Run clippy
        run: make lint
      - name: Run tests
        run: make test
      - name: Build
        run: make build

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Get current week
        id: week
        run: echo "week=$(date +'%Y-W%U')" >> $GITHUB_OUTPUT

      - name: Cache Solana CLI installation
        uses: actions/cache@v4
        with:
          path: ~/.local/share/solana
          key: solana-cli-stable-${{ runner.os }}-${{ steps.week.outputs.week }}
          restore-keys: |
            solana-cli-stable-${{ runner.os }}-

      - name: Install Solana CLI
        run: |
          # Install Solana CLI (stable version)
          sh -c "$(curl -sSfL https://release.anza.xyz/stable/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          # Verify installation
          solana --version
          solana-test-validator --version

      - name: Build project
        run: make build

      - name: Start Solana test validator
        run: |
          echo "üöÄ Starting Solana test validator..."
          solana-test-validator --reset --quiet &
          VALIDATOR_PID=$!
          echo "VALIDATOR_PID=$VALIDATOR_PID" >> $GITHUB_ENV

          # Wait for validator to be ready
          echo "‚è≥ Waiting for validator to be ready..."
          timeout=${{ env.VALIDATOR_TIMEOUT }}
          counter=0
          while [ $counter -lt $timeout ]; do
            if solana cluster-version --url ${{ env.RPC_URL }} >/dev/null 2>&1; then
              echo "‚úÖ Validator is ready!"
              break
            fi
            sleep 1
            counter=$((counter + 1))
          done

          if [ $counter -eq $timeout ]; then
            echo "‚ùå Validator failed to start within $timeout seconds"
            exit 1
          fi

      - name: Start Kora RPC server
        run: |
          echo "üöÄ Starting Kora RPC server..."
          cargo run -p kora-rpc --bin kora-rpc -- \
            --private-key ${{ env.KORA_PRIVATE_KEY }} \
            --config ${{ env.KORA_CONFIG_FILE }} \
            --rpc-url ${{ env.RPC_URL }} \
            --port ${{ env.KORA_RPC_PORT }} \
            &
          KORA_PID=$!
          echo "KORA_PID=$KORA_PID" >> $GITHUB_ENV

          # Wait for Kora RPC server to be ready
          echo "‚è≥ Waiting for Kora RPC server to be ready..."
          timeout=${{ env.KORA_TIMEOUT }}
          counter=0
          while [ $counter -lt $timeout ]; do
            if curl -s ${{ env.TEST_SERVER_URL }}/health >/dev/null 2>&1; then
              echo "‚úÖ Kora RPC server is ready!"
              break
            fi
            sleep 1
            counter=$((counter + 1))
          done

          if [ $counter -eq $timeout ]; then
            echo "‚ùå Kora RPC server failed to start within $timeout seconds"
            jobs
            exit 1
          fi

      - name: Setup test environment
        run: |
          echo "üîß Setting up test environment..."
          cargo run -p tests --bin setup-test-env

      - name: Install cargo-llvm-cov for coverage
        run: cargo install cargo-llvm-cov

      - name: Run integration tests with coverage
        run: |
          echo "üß™ Running integration tests with coverage..."
          # Clean previous coverage data
          cargo llvm-cov clean --workspace
          
          # Run unit tests with coverage
          echo "Running unit tests with coverage..."
          cargo llvm-cov --workspace --no-report
          
          # Run integration tests with coverage
          echo "Running integration tests with coverage..."
          cargo llvm-cov --workspace --tests --no-report
          
          # Generate reports
          echo "Generating coverage reports..."
          mkdir -p coverage
          cargo llvm-cov report --lcov --output-path coverage/lcov.info
          cargo llvm-cov report --html --output-dir coverage/html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Cleanup processes
        if: always()
        run: |
          echo "üßπ Cleaning up processes..."
          if [ ! -z "$KORA_PID" ]; then
            echo "Stopping Kora RPC server (PID: $KORA_PID)"
            kill $KORA_PID || true
          fi
          if [ ! -z "$VALIDATOR_PID" ]; then
            echo "Stopping Solana validator (PID: $VALIDATOR_PID)"
            kill $VALIDATOR_PID || true
          fi

          # Kill any remaining processes
          pkill -f "solana-test-validator" || true
          pkill -f "kora-rpc" || true

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Integration test failure logs ==="
          find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; || true

          echo "=== Process status ==="
          ps aux | grep -E "(solana|kora)" || true

          echo "=== Network status ==="
          netstat -tlnp | grep -E "(${{ env.VALIDATOR_PORT }}|${{ env.KORA_RPC_PORT }})" || true

