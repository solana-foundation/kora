import { getCreatorEncoder, getCollectionEncoder, getUsesEncoder, getCollectionDetailsEncoder, getCreatorDecoder, getCollectionDecoder, getUsesDecoder, getCollectionDetailsDecoder, getDataV2Encoder, getDataV2Decoder, TOKEN_METADATA_PROGRAM_ADDRESS, getAccountMetaFactory } from '../chunk-BN6CXGII.node.mjs';
export { CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR, TOKEN_METADATA_PROGRAM_ADDRESS, TokenMetadataAccount, TokenMetadataInstruction, UseMethod, collectionDetails, getCollectionCodec, getCollectionDecoder, getCollectionDetailsCodec, getCollectionDetailsDecoder, getCollectionDetailsEncoder, getCollectionEncoder, getCreateMetadataAccountV3DiscriminatorBytes, getCreateMetadataAccountV3Instruction, getCreateMetadataAccountV3InstructionDataCodec, getCreateMetadataAccountV3InstructionDataDecoder, getCreateMetadataAccountV3InstructionDataEncoder, getCreatorCodec, getCreatorDecoder, getCreatorEncoder, getDataV2Codec, getDataV2Decoder, getDataV2Encoder, getTokenMetadataAddress, getUseMethodCodec, getUseMethodDecoder, getUseMethodEncoder, getUsesCodec, getUsesDecoder, getUsesEncoder, isCollectionDetails, parseCreateMetadataAccountV3Instruction } from '../chunk-BN6CXGII.node.mjs';
export { hasSetComputeLimitInstruction, hasSetComputeUnitPriceInstruction, isSetComputeLimitInstruction, isSetComputeUnitPriceInstruction } from '../chunk-MBU5ZJWO.node.mjs';
export * from '@solana-program/system';
export * from '@solana-program/address-lookup-table';
export * from '@solana-program/compute-budget';
import { getStructEncoder, getUtf8Encoder, getStructDecoder, getUtf8Decoder, combineCodec } from '@solana/codecs';
import { AccountRole, getStructEncoder as getStructEncoder$1, addEncoderSizePrefix, getUtf8Encoder as getUtf8Encoder$1, getU32Encoder, getU16Encoder, getOptionEncoder, getArrayEncoder, getBooleanEncoder, getAddressEncoder, getStructDecoder as getStructDecoder$1, addDecoderSizePrefix, getUtf8Decoder as getUtf8Decoder$1, getU32Decoder, getU16Decoder, getOptionDecoder, getArrayDecoder, getBooleanDecoder, getAddressDecoder, combineCodec as combineCodec$1, getDiscriminatedUnionEncoder, getUnitEncoder, getTupleEncoder, getDiscriminatedUnionDecoder, getUnitDecoder, getTupleDecoder, getU8Encoder, getU8Decoder, getU64Encoder, getU64Decoder, getEnumEncoder, getEnumDecoder, getMapEncoder, getMapDecoder, getBytesEncoder, getBytesDecoder, fixEncoderSize, fixDecoderSize, decodeAccount, assertAccountExists, fetchEncodedAccount, assertAccountsExist, fetchEncodedAccounts, transformEncoder } from '@solana/kit';

// src/programs/memo/generated/programs/memo.ts
var MEMO_PROGRAM_ADDRESS = "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr";
var MemoInstruction = /* @__PURE__ */ ((MemoInstruction2) => {
  MemoInstruction2[MemoInstruction2["AddMemo"] = 0] = "AddMemo";
  return MemoInstruction2;
})(MemoInstruction || {});

// src/programs/memo/generated/instructions/addMemo.ts
function getAddMemoInstructionDataEncoder() {
  return getStructEncoder([["memo", getUtf8Encoder()]]);
}
function getAddMemoInstructionDataDecoder() {
  return getStructDecoder([["memo", getUtf8Decoder()]]);
}
function getAddMemoInstructionDataCodec() {
  return combineCodec(getAddMemoInstructionDataEncoder(), getAddMemoInstructionDataDecoder());
}
function getAddMemoInstruction(input, config) {
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;
  const args = { ...input };
  const remainingAccounts = (args.signers ?? []).map((signer) => ({
    address: signer.address,
    role: AccountRole.READONLY_SIGNER,
    signer
  }));
  const instruction = {
    accounts: remainingAccounts,
    programAddress,
    data: getAddMemoInstructionDataEncoder().encode(args)
  };
  return instruction;
}
function parseAddMemoInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getAddMemoInstructionDataDecoder().decode(instruction.data)
  };
}
function getAssetDataEncoder() {
  return getStructEncoder$1([
    ["name", addEncoderSizePrefix(getUtf8Encoder$1(), getU32Encoder())],
    ["symbol", addEncoderSizePrefix(getUtf8Encoder$1(), getU32Encoder())],
    ["uri", addEncoderSizePrefix(getUtf8Encoder$1(), getU32Encoder())],
    ["sellerFeeBasisPoints", getU16Encoder()],
    ["creators", getOptionEncoder(getArrayEncoder(getCreatorEncoder()))],
    ["primarySaleHappened", getBooleanEncoder()],
    ["isMutable", getBooleanEncoder()],
    ["tokenStandard", getTokenStandardEncoder()],
    ["collection", getOptionEncoder(getCollectionEncoder())],
    ["uses", getOptionEncoder(getUsesEncoder())],
    ["collectionDetails", getOptionEncoder(getCollectionDetailsEncoder())],
    ["ruleSet", getOptionEncoder(getAddressEncoder())]
  ]);
}
function getAssetDataDecoder() {
  return getStructDecoder$1([
    ["name", addDecoderSizePrefix(getUtf8Decoder$1(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder$1(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder$1(), getU32Decoder())],
    ["sellerFeeBasisPoints", getU16Decoder()],
    ["creators", getOptionDecoder(getArrayDecoder(getCreatorDecoder()))],
    ["primarySaleHappened", getBooleanDecoder()],
    ["isMutable", getBooleanDecoder()],
    ["tokenStandard", getTokenStandardDecoder()],
    ["collection", getOptionDecoder(getCollectionDecoder())],
    ["uses", getOptionDecoder(getUsesDecoder())],
    ["collectionDetails", getOptionDecoder(getCollectionDetailsDecoder())],
    ["ruleSet", getOptionDecoder(getAddressDecoder())]
  ]);
}
function getAssetDataCodec() {
  return combineCodec$1(getAssetDataEncoder(), getAssetDataDecoder());
}
function getCollectionDetailsToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder$1([
        ["fields", getTupleEncoder([getCollectionDetailsEncoder()])]
      ])
    ]
  ]);
}
function getCollectionDetailsToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder$1([
        ["fields", getTupleDecoder([getCollectionDetailsDecoder()])]
      ])
    ]
  ]);
}
function getCollectionDetailsToggleCodec() {
  return combineCodec$1(
    getCollectionDetailsToggleEncoder(),
    getCollectionDetailsToggleDecoder()
  );
}
function collectionDetailsToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isCollectionDetailsToggle(kind, value) {
  return value.__kind === kind;
}
function getCollectionToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder$1([["fields", getTupleEncoder([getCollectionEncoder()])]])
    ]
  ]);
}
function getCollectionToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder$1([["fields", getTupleDecoder([getCollectionDecoder()])]])
    ]
  ]);
}
function getCollectionToggleCodec() {
  return combineCodec$1(
    getCollectionToggleEncoder(),
    getCollectionToggleDecoder()
  );
}
function collectionToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isCollectionToggle(kind, value) {
  return value.__kind === kind;
}
function getCreateArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder$1([
        ["assetData", getAssetDataEncoder()],
        ["decimals", getOptionEncoder(getU8Encoder())],
        ["printSupply", getOptionEncoder(getPrintSupplyEncoder())]
      ])
    ]
  ]);
}
function getCreateArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder$1([
        ["assetData", getAssetDataDecoder()],
        ["decimals", getOptionDecoder(getU8Decoder())],
        ["printSupply", getOptionDecoder(getPrintSupplyDecoder())]
      ])
    ]
  ]);
}
function getCreateArgsCodec() {
  return combineCodec$1(getCreateArgsEncoder(), getCreateArgsDecoder());
}
function createArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isCreateArgs(kind, value) {
  return value.__kind === kind;
}
function getDataEncoder() {
  return getStructEncoder$1([
    ["name", addEncoderSizePrefix(getUtf8Encoder$1(), getU32Encoder())],
    ["symbol", addEncoderSizePrefix(getUtf8Encoder$1(), getU32Encoder())],
    ["uri", addEncoderSizePrefix(getUtf8Encoder$1(), getU32Encoder())],
    ["sellerFeeBasisPoints", getU16Encoder()],
    ["creators", getOptionEncoder(getArrayEncoder(getCreatorEncoder()))]
  ]);
}
function getDataDecoder() {
  return getStructDecoder$1([
    ["name", addDecoderSizePrefix(getUtf8Decoder$1(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder$1(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder$1(), getU32Decoder())],
    ["sellerFeeBasisPoints", getU16Decoder()],
    ["creators", getOptionDecoder(getArrayDecoder(getCreatorDecoder()))]
  ]);
}
function getDataCodec() {
  return combineCodec$1(getDataEncoder(), getDataDecoder());
}
function getDelegateArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "CollectionV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "SaleV1",
      getStructEncoder$1([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "TransferV1",
      getStructEncoder$1([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "DataV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "UtilityV1",
      getStructEncoder$1([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "StakingV1",
      getStructEncoder$1([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    ["StandardV1", getStructEncoder$1([["amount", getU64Encoder()]])],
    [
      "LockedTransferV1",
      getStructEncoder$1([
        ["amount", getU64Encoder()],
        ["lockedAddress", getAddressEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "ProgrammableConfigV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AuthorityItemV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "DataItemV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "CollectionItemV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "ProgrammableConfigItemV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "PrintDelegateV1",
      getStructEncoder$1([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ]
  ]);
}
function getDelegateArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "CollectionV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "SaleV1",
      getStructDecoder$1([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "TransferV1",
      getStructDecoder$1([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "DataV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "UtilityV1",
      getStructDecoder$1([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "StakingV1",
      getStructDecoder$1([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    ["StandardV1", getStructDecoder$1([["amount", getU64Decoder()]])],
    [
      "LockedTransferV1",
      getStructDecoder$1([
        ["amount", getU64Decoder()],
        ["lockedAddress", getAddressDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "ProgrammableConfigV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AuthorityItemV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "DataItemV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "CollectionItemV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "ProgrammableConfigItemV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "PrintDelegateV1",
      getStructDecoder$1([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ]
  ]);
}
function getDelegateArgsCodec() {
  return combineCodec$1(getDelegateArgsEncoder(), getDelegateArgsDecoder());
}
function delegateArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isDelegateArgs(kind, value) {
  return value.__kind === kind;
}
function getEscrowAuthorityEncoder() {
  return getDiscriminatedUnionEncoder([
    ["TokenOwner", getUnitEncoder()],
    [
      "Creator",
      getStructEncoder$1([["fields", getTupleEncoder([getAddressEncoder()])]])
    ]
  ]);
}
function getEscrowAuthorityDecoder() {
  return getDiscriminatedUnionDecoder([
    ["TokenOwner", getUnitDecoder()],
    [
      "Creator",
      getStructDecoder$1([["fields", getTupleDecoder([getAddressDecoder()])]])
    ]
  ]);
}
function getEscrowAuthorityCodec() {
  return combineCodec$1(getEscrowAuthorityEncoder(), getEscrowAuthorityDecoder());
}
function escrowAuthority(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isEscrowAuthority(kind, value) {
  return value.__kind === kind;
}
var Key = /* @__PURE__ */ ((Key2) => {
  Key2[Key2["Uninitialized"] = 0] = "Uninitialized";
  Key2[Key2["EditionV1"] = 1] = "EditionV1";
  Key2[Key2["MasterEditionV1"] = 2] = "MasterEditionV1";
  Key2[Key2["ReservationListV1"] = 3] = "ReservationListV1";
  Key2[Key2["MetadataV1"] = 4] = "MetadataV1";
  Key2[Key2["ReservationListV2"] = 5] = "ReservationListV2";
  Key2[Key2["MasterEditionV2"] = 6] = "MasterEditionV2";
  Key2[Key2["EditionMarker"] = 7] = "EditionMarker";
  Key2[Key2["UseAuthorityRecord"] = 8] = "UseAuthorityRecord";
  Key2[Key2["CollectionAuthorityRecord"] = 9] = "CollectionAuthorityRecord";
  Key2[Key2["TokenOwnedEscrow"] = 10] = "TokenOwnedEscrow";
  Key2[Key2["TokenRecord"] = 11] = "TokenRecord";
  Key2[Key2["MetadataDelegate"] = 12] = "MetadataDelegate";
  Key2[Key2["EditionMarkerV2"] = 13] = "EditionMarkerV2";
  Key2[Key2["HolderDelegate"] = 14] = "HolderDelegate";
  return Key2;
})(Key || {});
function getKeyEncoder() {
  return getEnumEncoder(Key);
}
function getKeyDecoder() {
  return getEnumDecoder(Key);
}
function getKeyCodec() {
  return combineCodec$1(getKeyEncoder(), getKeyDecoder());
}
function getMintArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder$1([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ]
  ]);
}
function getMintArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder$1([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ]
  ]);
}
function getMintArgsCodec() {
  return combineCodec$1(getMintArgsEncoder(), getMintArgsDecoder());
}
function mintArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isMintArgs(kind, value) {
  return value.__kind === kind;
}
function getPayloadEncoder() {
  return getStructEncoder$1([
    [
      "map",
      getMapEncoder(
        addEncoderSizePrefix(getUtf8Encoder$1(), getU32Encoder()),
        getPayloadTypeEncoder()
      )
    ]
  ]);
}
function getPayloadDecoder() {
  return getStructDecoder$1([
    [
      "map",
      getMapDecoder(
        addDecoderSizePrefix(getUtf8Decoder$1(), getU32Decoder()),
        getPayloadTypeDecoder()
      )
    ]
  ]);
}
function getPayloadCodec() {
  return combineCodec$1(getPayloadEncoder(), getPayloadDecoder());
}
function getProgrammableConfigEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder$1([["ruleSet", getOptionEncoder(getAddressEncoder())]])
    ]
  ]);
}
function getProgrammableConfigDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder$1([["ruleSet", getOptionDecoder(getAddressDecoder())]])
    ]
  ]);
}
function getProgrammableConfigCodec() {
  return combineCodec$1(
    getProgrammableConfigEncoder(),
    getProgrammableConfigDecoder()
  );
}
function programmableConfig(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isProgrammableConfig(kind, value) {
  return value.__kind === kind;
}
function getReservationEncoder() {
  return getStructEncoder$1([
    ["address", getAddressEncoder()],
    ["spotsRemaining", getU64Encoder()],
    ["totalSpots", getU64Encoder()]
  ]);
}
function getReservationDecoder() {
  return getStructDecoder$1([
    ["address", getAddressDecoder()],
    ["spotsRemaining", getU64Decoder()],
    ["totalSpots", getU64Decoder()]
  ]);
}
function getReservationCodec() {
  return combineCodec$1(getReservationEncoder(), getReservationDecoder());
}
var TokenStandard = /* @__PURE__ */ ((TokenStandard2) => {
  TokenStandard2[TokenStandard2["NonFungible"] = 0] = "NonFungible";
  TokenStandard2[TokenStandard2["FungibleAsset"] = 1] = "FungibleAsset";
  TokenStandard2[TokenStandard2["Fungible"] = 2] = "Fungible";
  TokenStandard2[TokenStandard2["NonFungibleEdition"] = 3] = "NonFungibleEdition";
  TokenStandard2[TokenStandard2["ProgrammableNonFungible"] = 4] = "ProgrammableNonFungible";
  TokenStandard2[TokenStandard2["ProgrammableNonFungibleEdition"] = 5] = "ProgrammableNonFungibleEdition";
  return TokenStandard2;
})(TokenStandard || {});
function getTokenStandardEncoder() {
  return getEnumEncoder(TokenStandard);
}
function getTokenStandardDecoder() {
  return getEnumDecoder(TokenStandard);
}
function getTokenStandardCodec() {
  return combineCodec$1(getTokenStandardEncoder(), getTokenStandardDecoder());
}
function getUpdateArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder$1([
        ["newUpdateAuthority", getOptionEncoder(getAddressEncoder())],
        ["data", getOptionEncoder(getDataEncoder())],
        ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
        ["isMutable", getOptionEncoder(getBooleanEncoder())],
        ["collection", getCollectionToggleEncoder()],
        ["collectionDetails", getCollectionDetailsToggleEncoder()],
        ["uses", getUsesToggleEncoder()],
        ["ruleSet", getRuleSetToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsUpdateAuthorityV2",
      getStructEncoder$1([
        ["newUpdateAuthority", getOptionEncoder(getAddressEncoder())],
        ["data", getOptionEncoder(getDataEncoder())],
        ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
        ["isMutable", getOptionEncoder(getBooleanEncoder())],
        ["collection", getCollectionToggleEncoder()],
        ["collectionDetails", getCollectionDetailsToggleEncoder()],
        ["uses", getUsesToggleEncoder()],
        ["ruleSet", getRuleSetToggleEncoder()],
        ["tokenStandard", getOptionEncoder(getTokenStandardEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsAuthorityItemDelegateV2",
      getStructEncoder$1([
        ["newUpdateAuthority", getOptionEncoder(getAddressEncoder())],
        ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
        ["isMutable", getOptionEncoder(getBooleanEncoder())],
        ["tokenStandard", getOptionEncoder(getTokenStandardEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsCollectionDelegateV2",
      getStructEncoder$1([
        ["collection", getCollectionToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsDataDelegateV2",
      getStructEncoder$1([
        ["data", getOptionEncoder(getDataEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsProgrammableConfigDelegateV2",
      getStructEncoder$1([
        ["ruleSet", getRuleSetToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsDataItemDelegateV2",
      getStructEncoder$1([
        ["data", getOptionEncoder(getDataEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsCollectionItemDelegateV2",
      getStructEncoder$1([
        ["collection", getCollectionToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsProgrammableConfigItemDelegateV2",
      getStructEncoder$1([
        ["ruleSet", getRuleSetToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ]
  ]);
}
function getUpdateArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder$1([
        ["newUpdateAuthority", getOptionDecoder(getAddressDecoder())],
        ["data", getOptionDecoder(getDataDecoder())],
        ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
        ["isMutable", getOptionDecoder(getBooleanDecoder())],
        ["collection", getCollectionToggleDecoder()],
        ["collectionDetails", getCollectionDetailsToggleDecoder()],
        ["uses", getUsesToggleDecoder()],
        ["ruleSet", getRuleSetToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsUpdateAuthorityV2",
      getStructDecoder$1([
        ["newUpdateAuthority", getOptionDecoder(getAddressDecoder())],
        ["data", getOptionDecoder(getDataDecoder())],
        ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
        ["isMutable", getOptionDecoder(getBooleanDecoder())],
        ["collection", getCollectionToggleDecoder()],
        ["collectionDetails", getCollectionDetailsToggleDecoder()],
        ["uses", getUsesToggleDecoder()],
        ["ruleSet", getRuleSetToggleDecoder()],
        ["tokenStandard", getOptionDecoder(getTokenStandardDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsAuthorityItemDelegateV2",
      getStructDecoder$1([
        ["newUpdateAuthority", getOptionDecoder(getAddressDecoder())],
        ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
        ["isMutable", getOptionDecoder(getBooleanDecoder())],
        ["tokenStandard", getOptionDecoder(getTokenStandardDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsCollectionDelegateV2",
      getStructDecoder$1([
        ["collection", getCollectionToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsDataDelegateV2",
      getStructDecoder$1([
        ["data", getOptionDecoder(getDataDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsProgrammableConfigDelegateV2",
      getStructDecoder$1([
        ["ruleSet", getRuleSetToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsDataItemDelegateV2",
      getStructDecoder$1([
        ["data", getOptionDecoder(getDataDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsCollectionItemDelegateV2",
      getStructDecoder$1([
        ["collection", getCollectionToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsProgrammableConfigItemDelegateV2",
      getStructDecoder$1([
        ["ruleSet", getRuleSetToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ]
  ]);
}
function getUpdateArgsCodec() {
  return combineCodec$1(getUpdateArgsEncoder(), getUpdateArgsDecoder());
}
function updateArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isUpdateArgs(kind, value) {
  return value.__kind === kind;
}
function getUsesToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder$1([["fields", getTupleEncoder([getUsesEncoder()])]])
    ]
  ]);
}
function getUsesToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder$1([["fields", getTupleDecoder([getUsesDecoder()])]])
    ]
  ]);
}
function getUsesToggleCodec() {
  return combineCodec$1(getUsesToggleEncoder(), getUsesToggleDecoder());
}
function usesToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isUsesToggle(kind, value) {
  return value.__kind === kind;
}
function getRuleSetToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder$1([["fields", getTupleEncoder([getAddressEncoder()])]])
    ]
  ]);
}
function getRuleSetToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder$1([["fields", getTupleDecoder([getAddressDecoder()])]])
    ]
  ]);
}
function getRuleSetToggleCodec() {
  return combineCodec$1(getRuleSetToggleEncoder(), getRuleSetToggleDecoder());
}
function ruleSetToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isRuleSetToggle(kind, value) {
  return value.__kind === kind;
}
function getAuthorizationDataEncoder() {
  return getStructEncoder$1([["payload", getPayloadEncoder()]]);
}
function getAuthorizationDataDecoder() {
  return getStructDecoder$1([["payload", getPayloadDecoder()]]);
}
function getAuthorizationDataCodec() {
  return combineCodec$1(
    getAuthorizationDataEncoder(),
    getAuthorizationDataDecoder()
  );
}
function getPayloadTypeEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "Pubkey",
      getStructEncoder$1([["fields", getTupleEncoder([getAddressEncoder()])]])
    ],
    [
      "Seeds",
      getStructEncoder$1([["fields", getTupleEncoder([getSeedsVecEncoder()])]])
    ],
    [
      "MerkleProof",
      getStructEncoder$1([["fields", getTupleEncoder([getProofInfoEncoder()])]])
    ],
    [
      "Number",
      getStructEncoder$1([["fields", getTupleEncoder([getU64Encoder()])]])
    ]
  ]);
}
function getPayloadTypeDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "Pubkey",
      getStructDecoder$1([["fields", getTupleDecoder([getAddressDecoder()])]])
    ],
    [
      "Seeds",
      getStructDecoder$1([["fields", getTupleDecoder([getSeedsVecDecoder()])]])
    ],
    [
      "MerkleProof",
      getStructDecoder$1([["fields", getTupleDecoder([getProofInfoDecoder()])]])
    ],
    [
      "Number",
      getStructDecoder$1([["fields", getTupleDecoder([getU64Decoder()])]])
    ]
  ]);
}
function getPayloadTypeCodec() {
  return combineCodec$1(getPayloadTypeEncoder(), getPayloadTypeDecoder());
}
function payloadType(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isPayloadType(kind, value) {
  return value.__kind === kind;
}
function getSeedsVecEncoder() {
  return getStructEncoder$1([
    [
      "seeds",
      getArrayEncoder(addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()))
    ]
  ]);
}
function getSeedsVecDecoder() {
  return getStructDecoder$1([
    [
      "seeds",
      getArrayDecoder(addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()))
    ]
  ]);
}
function getSeedsVecCodec() {
  return combineCodec$1(getSeedsVecEncoder(), getSeedsVecDecoder());
}
function getProofInfoEncoder() {
  return getStructEncoder$1([
    ["proof", getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))]
  ]);
}
function getProofInfoDecoder() {
  return getStructDecoder$1([
    ["proof", getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))]
  ]);
}
function getProofInfoCodec() {
  return combineCodec$1(getProofInfoEncoder(), getProofInfoDecoder());
}
function getPrintSupplyEncoder() {
  return getDiscriminatedUnionEncoder([
    ["Zero", getUnitEncoder()],
    [
      "Limited",
      getStructEncoder$1([["fields", getTupleEncoder([getU64Encoder()])]])
    ],
    ["Unlimited", getUnitEncoder()]
  ]);
}
function getPrintSupplyDecoder() {
  return getDiscriminatedUnionDecoder([
    ["Zero", getUnitDecoder()],
    [
      "Limited",
      getStructDecoder$1([["fields", getTupleDecoder([getU64Decoder()])]])
    ],
    ["Unlimited", getUnitDecoder()]
  ]);
}
function getPrintSupplyCodec() {
  return combineCodec$1(getPrintSupplyEncoder(), getPrintSupplyDecoder());
}
function printSupply(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isPrintSupply(kind, value) {
  return value.__kind === kind;
}

// src/programs/token-metadata/generated/accounts/metadata.ts
function getMetadataEncoder() {
  return getStructEncoder$1([
    ["key", getKeyEncoder()],
    ["updateAuthority", getAddressEncoder()],
    ["mint", getAddressEncoder()],
    ["data", getDataEncoder()],
    ["primarySaleHappened", getBooleanEncoder()],
    ["isMutable", getBooleanEncoder()],
    ["editionNonce", getOptionEncoder(getU8Encoder())],
    ["tokenStandard", getOptionEncoder(getTokenStandardEncoder())],
    ["collection", getOptionEncoder(getCollectionEncoder())],
    ["uses", getOptionEncoder(getUsesEncoder())],
    ["collectionDetails", getOptionEncoder(getCollectionDetailsEncoder())],
    ["programmableConfig", getOptionEncoder(getProgrammableConfigEncoder())]
  ]);
}
function getMetadataDecoder() {
  return getStructDecoder$1([
    ["key", getKeyDecoder()],
    ["updateAuthority", getAddressDecoder()],
    ["mint", getAddressDecoder()],
    ["data", getDataDecoder()],
    ["primarySaleHappened", getBooleanDecoder()],
    ["isMutable", getBooleanDecoder()],
    ["editionNonce", getOptionDecoder(getU8Decoder())],
    ["tokenStandard", getOptionDecoder(getTokenStandardDecoder())],
    ["collection", getOptionDecoder(getCollectionDecoder())],
    ["uses", getOptionDecoder(getUsesDecoder())],
    ["collectionDetails", getOptionDecoder(getCollectionDetailsDecoder())],
    ["programmableConfig", getOptionDecoder(getProgrammableConfigDecoder())]
  ]);
}
function getMetadataCodec() {
  return combineCodec$1(getMetadataEncoder(), getMetadataDecoder());
}
function decodeMetadata(encodedAccount) {
  return decodeAccount(encodedAccount, getMetadataDecoder());
}
async function fetchMetadata(rpc, address, config) {
  const maybeAccount = await fetchMaybeMetadata(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}
async function fetchMaybeMetadata(rpc, address, config) {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMetadata(maybeAccount);
}
async function fetchAllMetadata(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeMetadata(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}
async function fetchAllMaybeMetadata(rpc, addresses, config) {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMetadata(maybeAccount));
}
var UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR = 15;
function getUpdateMetadataAccountV2DiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR);
}
function getUpdateMetadataAccountV2InstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder$1([
      ["discriminator", getU8Encoder()],
      ["data", getOptionEncoder(getDataV2Encoder())],
      ["updateAuthority", getOptionEncoder(getAddressEncoder())],
      ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
      ["isMutable", getOptionEncoder(getBooleanEncoder())]
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR
    })
  );
}
function getUpdateMetadataAccountV2InstructionDataDecoder() {
  return getStructDecoder$1([
    ["discriminator", getU8Decoder()],
    ["data", getOptionDecoder(getDataV2Decoder())],
    ["updateAuthority", getOptionDecoder(getAddressDecoder())],
    ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
    ["isMutable", getOptionDecoder(getBooleanDecoder())]
  ]);
}
function getUpdateMetadataAccountV2InstructionDataCodec() {
  return combineCodec$1(
    getUpdateMetadataAccountV2InstructionDataEncoder(),
    getUpdateMetadataAccountV2InstructionDataDecoder()
  );
}
function getUpdateMetadataAccountV2Instruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    updateAuthority: {
      value: input.updateAuthority ?? null,
      isWritable: false
    }
  };
  const accounts = originalAccounts;
  const args = { ...input, updateAuthority: input.updateAuthorityArg };
  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.metadata), getAccountMeta(accounts.updateAuthority)],
    programAddress,
    data: getUpdateMetadataAccountV2InstructionDataEncoder().encode(args)
  };
  return instruction;
}
function parseUpdateMetadataAccountV2Instruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      updateAuthority: getNextAccount()
    },
    data: getUpdateMetadataAccountV2InstructionDataDecoder().decode(instruction.data)
  };
}

export { Key, MEMO_PROGRAM_ADDRESS, MemoInstruction, TokenStandard, UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR, collectionDetailsToggle, collectionToggle, createArgs, decodeMetadata, delegateArgs, escrowAuthority, fetchAllMaybeMetadata, fetchAllMetadata, fetchMaybeMetadata, fetchMetadata, getAddMemoInstruction, getAddMemoInstructionDataCodec, getAddMemoInstructionDataDecoder, getAddMemoInstructionDataEncoder, getAssetDataCodec, getAssetDataDecoder, getAssetDataEncoder, getAuthorizationDataCodec, getAuthorizationDataDecoder, getAuthorizationDataEncoder, getCollectionDetailsToggleCodec, getCollectionDetailsToggleDecoder, getCollectionDetailsToggleEncoder, getCollectionToggleCodec, getCollectionToggleDecoder, getCollectionToggleEncoder, getCreateArgsCodec, getCreateArgsDecoder, getCreateArgsEncoder, getDataCodec, getDataDecoder, getDataEncoder, getDelegateArgsCodec, getDelegateArgsDecoder, getDelegateArgsEncoder, getEscrowAuthorityCodec, getEscrowAuthorityDecoder, getEscrowAuthorityEncoder, getKeyCodec, getKeyDecoder, getKeyEncoder, getMetadataCodec, getMetadataDecoder, getMetadataEncoder, getMintArgsCodec, getMintArgsDecoder, getMintArgsEncoder, getPayloadCodec, getPayloadDecoder, getPayloadEncoder, getPayloadTypeCodec, getPayloadTypeDecoder, getPayloadTypeEncoder, getPrintSupplyCodec, getPrintSupplyDecoder, getPrintSupplyEncoder, getProgrammableConfigCodec, getProgrammableConfigDecoder, getProgrammableConfigEncoder, getProofInfoCodec, getProofInfoDecoder, getProofInfoEncoder, getReservationCodec, getReservationDecoder, getReservationEncoder, getRuleSetToggleCodec, getRuleSetToggleDecoder, getRuleSetToggleEncoder, getSeedsVecCodec, getSeedsVecDecoder, getSeedsVecEncoder, getTokenStandardCodec, getTokenStandardDecoder, getTokenStandardEncoder, getUpdateArgsCodec, getUpdateArgsDecoder, getUpdateArgsEncoder, getUpdateMetadataAccountV2DiscriminatorBytes, getUpdateMetadataAccountV2Instruction, getUpdateMetadataAccountV2InstructionDataCodec, getUpdateMetadataAccountV2InstructionDataDecoder, getUpdateMetadataAccountV2InstructionDataEncoder, getUsesToggleCodec, getUsesToggleDecoder, getUsesToggleEncoder, isCollectionDetailsToggle, isCollectionToggle, isCreateArgs, isDelegateArgs, isEscrowAuthority, isMintArgs, isPayloadType, isPrintSupply, isProgrammableConfig, isRuleSetToggle, isUpdateArgs, isUsesToggle, mintArgs, parseAddMemoInstruction, parseUpdateMetadataAccountV2Instruction, payloadType, printSupply, programmableConfig, ruleSetToggle, updateArgs, usesToggle };
//# sourceMappingURL=index.node.mjs.map
//# sourceMappingURL=index.node.mjs.map