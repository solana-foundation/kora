import { COMPUTE_BUDGET_PROGRAM_ADDRESS, ComputeBudgetInstruction } from '@solana-program/compute-budget';
import { isInstructionForProgram, isInstructionWithData } from '@solana/kit';

// src/core/const.ts
var LAMPORTS_PER_SOL = 1e9;
var GENESIS_HASH = {
  mainnet: "5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d",
  devnet: "EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG",
  testnet: "4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY"
};

// src/core/utils.ts
function getMonikerFromGenesisHash(hash) {
  switch (hash) {
    case GENESIS_HASH.mainnet:
      return "mainnet";
    case GENESIS_HASH.devnet:
      return "devnet";
    case GENESIS_HASH.testnet:
      return "testnet";
    default:
      return "unknown";
  }
}
function checkedAddress(input) {
  return typeof input == "string" ? input : input.address;
}
function lamportsToSol(lamports) {
  return new Intl.NumberFormat("en-US", { maximumFractionDigits: 9 }).format(`${lamports}E-9`);
}
function isSetComputeLimitInstruction(instruction) {
  return isInstructionForProgram(instruction, COMPUTE_BUDGET_PROGRAM_ADDRESS) && isInstructionWithData(instruction) && instruction.data[0] === ComputeBudgetInstruction.SetComputeUnitLimit;
}
function hasSetComputeLimitInstruction(tx) {
  return tx.instructions.filter(isSetComputeLimitInstruction).length == 1;
}
function isSetComputeUnitPriceInstruction(instruction) {
  return isInstructionForProgram(instruction, COMPUTE_BUDGET_PROGRAM_ADDRESS) && isInstructionWithData(instruction) && instruction.data[0] === ComputeBudgetInstruction.SetComputeUnitPrice;
}
function hasSetComputeUnitPriceInstruction(tx) {
  return tx.instructions.filter(isSetComputeUnitPriceInstruction).length == 1;
}

export { GENESIS_HASH, LAMPORTS_PER_SOL, checkedAddress, getMonikerFromGenesisHash, hasSetComputeLimitInstruction, hasSetComputeUnitPriceInstruction, isSetComputeLimitInstruction, isSetComputeUnitPriceInstruction, lamportsToSol };
//# sourceMappingURL=chunk-MBU5ZJWO.node.mjs.map
//# sourceMappingURL=chunk-MBU5ZJWO.node.mjs.map