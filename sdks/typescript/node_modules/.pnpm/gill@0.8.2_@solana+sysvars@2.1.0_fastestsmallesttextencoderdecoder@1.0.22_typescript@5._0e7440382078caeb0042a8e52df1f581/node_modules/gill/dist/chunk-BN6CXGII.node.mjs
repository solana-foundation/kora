import { checkedAddress } from './chunk-MBU5ZJWO.node.mjs';
import { getStructEncoder, getBooleanEncoder, getAddressEncoder, getStructDecoder, getBooleanDecoder, getAddressDecoder, combineCodec, getDiscriminatedUnionEncoder, getU64Encoder, fixEncoderSize, getBytesEncoder, getDiscriminatedUnionDecoder, getU64Decoder, fixDecoderSize, getBytesDecoder, getU8Encoder, getU8Decoder, getEnumEncoder, getEnumDecoder, addEncoderSizePrefix, getUtf8Encoder, getU32Encoder, getU16Encoder, getOptionEncoder, getArrayEncoder, addDecoderSizePrefix, getUtf8Decoder, getU32Decoder, getU16Decoder, getOptionDecoder, getArrayDecoder, AccountRole, upgradeRoleToSigner, isTransactionSigner as isTransactionSigner$1, getProgramDerivedAddress } from '@solana/kit';
import { getU8Encoder as getU8Encoder$1, transformEncoder, getStructEncoder as getStructEncoder$1, getBooleanEncoder as getBooleanEncoder$1, getOptionEncoder as getOptionEncoder$1, getStructDecoder as getStructDecoder$1, getU8Decoder as getU8Decoder$1, getBooleanDecoder as getBooleanDecoder$1, getOptionDecoder as getOptionDecoder$1, combineCodec as combineCodec$1 } from '@solana/codecs';

function getCollectionEncoder() {
  return getStructEncoder([
    ["verified", getBooleanEncoder()],
    ["key", getAddressEncoder()]
  ]);
}
function getCollectionDecoder() {
  return getStructDecoder([
    ["verified", getBooleanDecoder()],
    ["key", getAddressDecoder()]
  ]);
}
function getCollectionCodec() {
  return combineCodec(getCollectionEncoder(), getCollectionDecoder());
}
function getCollectionDetailsEncoder() {
  return getDiscriminatedUnionEncoder([
    ["V1", getStructEncoder([["size", getU64Encoder()]])],
    [
      "V2",
      getStructEncoder([["padding", fixEncoderSize(getBytesEncoder(), 8)]])
    ]
  ]);
}
function getCollectionDetailsDecoder() {
  return getDiscriminatedUnionDecoder([
    ["V1", getStructDecoder([["size", getU64Decoder()]])],
    [
      "V2",
      getStructDecoder([["padding", fixDecoderSize(getBytesDecoder(), 8)]])
    ]
  ]);
}
function getCollectionDetailsCodec() {
  return combineCodec(
    getCollectionDetailsEncoder(),
    getCollectionDetailsDecoder()
  );
}
function collectionDetails(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isCollectionDetails(kind, value) {
  return value.__kind === kind;
}
function getCreatorEncoder() {
  return getStructEncoder([
    ["address", getAddressEncoder()],
    ["verified", getBooleanEncoder()],
    ["share", getU8Encoder()]
  ]);
}
function getCreatorDecoder() {
  return getStructDecoder([
    ["address", getAddressDecoder()],
    ["verified", getBooleanDecoder()],
    ["share", getU8Decoder()]
  ]);
}
function getCreatorCodec() {
  return combineCodec(getCreatorEncoder(), getCreatorDecoder());
}
function getUsesEncoder() {
  return getStructEncoder([
    ["useMethod", getUseMethodEncoder()],
    ["remaining", getU64Encoder()],
    ["total", getU64Encoder()]
  ]);
}
function getUsesDecoder() {
  return getStructDecoder([
    ["useMethod", getUseMethodDecoder()],
    ["remaining", getU64Decoder()],
    ["total", getU64Decoder()]
  ]);
}
function getUsesCodec() {
  return combineCodec(getUsesEncoder(), getUsesDecoder());
}
var UseMethod = /* @__PURE__ */ ((UseMethod2) => {
  UseMethod2[UseMethod2["Burn"] = 0] = "Burn";
  UseMethod2[UseMethod2["Multiple"] = 1] = "Multiple";
  UseMethod2[UseMethod2["Single"] = 2] = "Single";
  return UseMethod2;
})(UseMethod || {});
function getUseMethodEncoder() {
  return getEnumEncoder(UseMethod);
}
function getUseMethodDecoder() {
  return getEnumDecoder(UseMethod);
}
function getUseMethodCodec() {
  return combineCodec(getUseMethodEncoder(), getUseMethodDecoder());
}

// src/programs/token-metadata/generated/types/dataV2.ts
function getDataV2Encoder() {
  return getStructEncoder([
    ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["symbol", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["uri", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["sellerFeeBasisPoints", getU16Encoder()],
    ["creators", getOptionEncoder(getArrayEncoder(getCreatorEncoder()))],
    ["collection", getOptionEncoder(getCollectionEncoder())],
    ["uses", getOptionEncoder(getUsesEncoder())]
  ]);
}
function getDataV2Decoder() {
  return getStructDecoder([
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["sellerFeeBasisPoints", getU16Decoder()],
    ["creators", getOptionDecoder(getArrayDecoder(getCreatorDecoder()))],
    ["collection", getOptionDecoder(getCollectionDecoder())],
    ["uses", getOptionDecoder(getUsesDecoder())]
  ]);
}
function getDataV2Codec() {
  return combineCodec(getDataV2Encoder(), getDataV2Decoder());
}

// src/programs/token-metadata/generated/programs/tokenMetadata.ts
var TOKEN_METADATA_PROGRAM_ADDRESS = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
var TokenMetadataAccount = /* @__PURE__ */ ((TokenMetadataAccount2) => {
  TokenMetadataAccount2[TokenMetadataAccount2["CollectionAuthorityRecord"] = 0] = "CollectionAuthorityRecord";
  TokenMetadataAccount2[TokenMetadataAccount2["MetadataDelegateRecord"] = 1] = "MetadataDelegateRecord";
  TokenMetadataAccount2[TokenMetadataAccount2["HolderDelegateRecord"] = 2] = "HolderDelegateRecord";
  TokenMetadataAccount2[TokenMetadataAccount2["Edition"] = 3] = "Edition";
  TokenMetadataAccount2[TokenMetadataAccount2["EditionMarker"] = 4] = "EditionMarker";
  TokenMetadataAccount2[TokenMetadataAccount2["EditionMarkerV2"] = 5] = "EditionMarkerV2";
  TokenMetadataAccount2[TokenMetadataAccount2["TokenOwnedEscrow"] = 6] = "TokenOwnedEscrow";
  TokenMetadataAccount2[TokenMetadataAccount2["MasterEditionV2"] = 7] = "MasterEditionV2";
  TokenMetadataAccount2[TokenMetadataAccount2["MasterEditionV1"] = 8] = "MasterEditionV1";
  TokenMetadataAccount2[TokenMetadataAccount2["Metadata"] = 9] = "Metadata";
  TokenMetadataAccount2[TokenMetadataAccount2["TokenRecord"] = 10] = "TokenRecord";
  TokenMetadataAccount2[TokenMetadataAccount2["ReservationListV2"] = 11] = "ReservationListV2";
  TokenMetadataAccount2[TokenMetadataAccount2["ReservationListV1"] = 12] = "ReservationListV1";
  TokenMetadataAccount2[TokenMetadataAccount2["UseAuthorityRecord"] = 13] = "UseAuthorityRecord";
  return TokenMetadataAccount2;
})(TokenMetadataAccount || {});
var TokenMetadataInstruction = /* @__PURE__ */ ((TokenMetadataInstruction2) => {
  TokenMetadataInstruction2[TokenMetadataInstruction2["CreateMetadataAccount"] = 0] = "CreateMetadataAccount";
  TokenMetadataInstruction2[TokenMetadataInstruction2["UpdateMetadataAccount"] = 1] = "UpdateMetadataAccount";
  TokenMetadataInstruction2[TokenMetadataInstruction2["DeprecatedCreateMasterEdition"] = 2] = "DeprecatedCreateMasterEdition";
  TokenMetadataInstruction2[TokenMetadataInstruction2["DeprecatedMintNewEditionFromMasterEditionViaPrintingToken"] = 3] = "DeprecatedMintNewEditionFromMasterEditionViaPrintingToken";
  TokenMetadataInstruction2[TokenMetadataInstruction2["UpdatePrimarySaleHappenedViaToken"] = 4] = "UpdatePrimarySaleHappenedViaToken";
  TokenMetadataInstruction2[TokenMetadataInstruction2["DeprecatedSetReservationList"] = 5] = "DeprecatedSetReservationList";
  TokenMetadataInstruction2[TokenMetadataInstruction2["DeprecatedCreateReservationList"] = 6] = "DeprecatedCreateReservationList";
  TokenMetadataInstruction2[TokenMetadataInstruction2["SignMetadata"] = 7] = "SignMetadata";
  TokenMetadataInstruction2[TokenMetadataInstruction2["DeprecatedMintPrintingTokensViaToken"] = 8] = "DeprecatedMintPrintingTokensViaToken";
  TokenMetadataInstruction2[TokenMetadataInstruction2["DeprecatedMintPrintingTokens"] = 9] = "DeprecatedMintPrintingTokens";
  TokenMetadataInstruction2[TokenMetadataInstruction2["CreateMasterEdition"] = 10] = "CreateMasterEdition";
  TokenMetadataInstruction2[TokenMetadataInstruction2["MintNewEditionFromMasterEditionViaToken"] = 11] = "MintNewEditionFromMasterEditionViaToken";
  TokenMetadataInstruction2[TokenMetadataInstruction2["ConvertMasterEditionV1ToV2"] = 12] = "ConvertMasterEditionV1ToV2";
  TokenMetadataInstruction2[TokenMetadataInstruction2["MintNewEditionFromMasterEditionViaVaultProxy"] = 13] = "MintNewEditionFromMasterEditionViaVaultProxy";
  TokenMetadataInstruction2[TokenMetadataInstruction2["PuffMetadata"] = 14] = "PuffMetadata";
  TokenMetadataInstruction2[TokenMetadataInstruction2["UpdateMetadataAccountV2"] = 15] = "UpdateMetadataAccountV2";
  TokenMetadataInstruction2[TokenMetadataInstruction2["CreateMetadataAccountV2"] = 16] = "CreateMetadataAccountV2";
  TokenMetadataInstruction2[TokenMetadataInstruction2["CreateMasterEditionV3"] = 17] = "CreateMasterEditionV3";
  TokenMetadataInstruction2[TokenMetadataInstruction2["VerifyCollection"] = 18] = "VerifyCollection";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Utilize"] = 19] = "Utilize";
  TokenMetadataInstruction2[TokenMetadataInstruction2["ApproveUseAuthority"] = 20] = "ApproveUseAuthority";
  TokenMetadataInstruction2[TokenMetadataInstruction2["RevokeUseAuthority"] = 21] = "RevokeUseAuthority";
  TokenMetadataInstruction2[TokenMetadataInstruction2["UnverifyCollection"] = 22] = "UnverifyCollection";
  TokenMetadataInstruction2[TokenMetadataInstruction2["ApproveCollectionAuthority"] = 23] = "ApproveCollectionAuthority";
  TokenMetadataInstruction2[TokenMetadataInstruction2["RevokeCollectionAuthority"] = 24] = "RevokeCollectionAuthority";
  TokenMetadataInstruction2[TokenMetadataInstruction2["SetAndVerifyCollection"] = 25] = "SetAndVerifyCollection";
  TokenMetadataInstruction2[TokenMetadataInstruction2["FreezeDelegatedAccount"] = 26] = "FreezeDelegatedAccount";
  TokenMetadataInstruction2[TokenMetadataInstruction2["ThawDelegatedAccount"] = 27] = "ThawDelegatedAccount";
  TokenMetadataInstruction2[TokenMetadataInstruction2["RemoveCreatorVerification"] = 28] = "RemoveCreatorVerification";
  TokenMetadataInstruction2[TokenMetadataInstruction2["BurnNft"] = 29] = "BurnNft";
  TokenMetadataInstruction2[TokenMetadataInstruction2["VerifySizedCollectionItem"] = 30] = "VerifySizedCollectionItem";
  TokenMetadataInstruction2[TokenMetadataInstruction2["UnverifySizedCollectionItem"] = 31] = "UnverifySizedCollectionItem";
  TokenMetadataInstruction2[TokenMetadataInstruction2["SetAndVerifySizedCollectionItem"] = 32] = "SetAndVerifySizedCollectionItem";
  TokenMetadataInstruction2[TokenMetadataInstruction2["CreateMetadataAccountV3"] = 33] = "CreateMetadataAccountV3";
  TokenMetadataInstruction2[TokenMetadataInstruction2["SetCollectionSize"] = 34] = "SetCollectionSize";
  TokenMetadataInstruction2[TokenMetadataInstruction2["SetTokenStandard"] = 35] = "SetTokenStandard";
  TokenMetadataInstruction2[TokenMetadataInstruction2["BubblegumSetCollectionSize"] = 36] = "BubblegumSetCollectionSize";
  TokenMetadataInstruction2[TokenMetadataInstruction2["BurnEditionNft"] = 37] = "BurnEditionNft";
  TokenMetadataInstruction2[TokenMetadataInstruction2["CreateEscrowAccount"] = 38] = "CreateEscrowAccount";
  TokenMetadataInstruction2[TokenMetadataInstruction2["CloseEscrowAccount"] = 39] = "CloseEscrowAccount";
  TokenMetadataInstruction2[TokenMetadataInstruction2["TransferOutOfEscrow"] = 40] = "TransferOutOfEscrow";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Burn"] = 41] = "Burn";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Create"] = 42] = "Create";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Mint"] = 43] = "Mint";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Delegate"] = 44] = "Delegate";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Revoke"] = 45] = "Revoke";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Lock"] = 46] = "Lock";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Unlock"] = 47] = "Unlock";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Migrate"] = 48] = "Migrate";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Transfer"] = 49] = "Transfer";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Update"] = 50] = "Update";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Use"] = 51] = "Use";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Verify"] = 52] = "Verify";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Unverify"] = 53] = "Unverify";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Collect"] = 54] = "Collect";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Print"] = 55] = "Print";
  TokenMetadataInstruction2[TokenMetadataInstruction2["Resize"] = 56] = "Resize";
  TokenMetadataInstruction2[TokenMetadataInstruction2["CloseAccounts"] = 57] = "CloseAccounts";
  return TokenMetadataInstruction2;
})(TokenMetadataInstruction || {});
function expectAddress(value) {
  if (!value) {
    throw new Error("Expected a Address.");
  }
  if (typeof value === "object" && "address" in value) {
    return value.address;
  }
  if (Array.isArray(value)) {
    return value[0];
  }
  return value;
}
function getAccountMetaFactory(programAddress, optionalAccountStrategy) {
  return (account) => {
    if (!account.value) {
      if (optionalAccountStrategy === "omitted") return;
      return Object.freeze({
        address: programAddress,
        role: AccountRole.READONLY
      });
    }
    const writableRole = account.isWritable ? AccountRole.WRITABLE : AccountRole.READONLY;
    return Object.freeze({
      address: expectAddress(account.value),
      role: isTransactionSigner(account.value) ? upgradeRoleToSigner(writableRole) : writableRole,
      ...isTransactionSigner(account.value) ? { signer: account.value } : {}
    });
  };
}
function isTransactionSigner(value) {
  return !!value && typeof value === "object" && "address" in value && isTransactionSigner$1(value);
}

// src/programs/token-metadata/generated/instructions/createMetadataAccountV3.ts
var CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR = 33;
function getCreateMetadataAccountV3DiscriminatorBytes() {
  return getU8Encoder$1().encode(CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR);
}
function getCreateMetadataAccountV3InstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder$1([
      ["discriminator", getU8Encoder$1()],
      ["data", getDataV2Encoder()],
      ["isMutable", getBooleanEncoder$1()],
      ["collectionDetails", getOptionEncoder$1(getCollectionDetailsEncoder())]
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR
    })
  );
}
function getCreateMetadataAccountV3InstructionDataDecoder() {
  return getStructDecoder$1([
    ["discriminator", getU8Decoder$1()],
    ["data", getDataV2Decoder()],
    ["isMutable", getBooleanDecoder$1()],
    ["collectionDetails", getOptionDecoder$1(getCollectionDetailsDecoder())]
  ]);
}
function getCreateMetadataAccountV3InstructionDataCodec() {
  return combineCodec$1(
    getCreateMetadataAccountV3InstructionDataEncoder(),
    getCreateMetadataAccountV3InstructionDataDecoder()
  );
}
function getCreateMetadataAccountV3Instruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    updateAuthority: {
      value: input.updateAuthority ?? null,
      isWritable: false
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, "omitted");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent)
    ].filter((x) => x !== void 0),
    programAddress,
    data: getCreateMetadataAccountV3InstructionDataEncoder().encode(args)
  };
  return instruction;
}
function parseCreateMetadataAccountV3Instruction(instruction) {
  if (instruction.accounts.length < 6) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  let optionalAccountsRemaining = instruction.accounts.length - 6;
  const getNextOptionalAccount = () => {
    if (optionalAccountsRemaining === 0) return void 0;
    optionalAccountsRemaining -= 1;
    return getNextAccount();
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      mint: getNextAccount(),
      mintAuthority: getNextAccount(),
      payer: getNextAccount(),
      updateAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextOptionalAccount()
    },
    data: getCreateMetadataAccountV3InstructionDataDecoder().decode(instruction.data)
  };
}
async function getTokenMetadataAddress(mint) {
  return (await getProgramDerivedAddress({
    programAddress: TOKEN_METADATA_PROGRAM_ADDRESS,
    seeds: [
      Buffer.from("metadata"),
      getAddressEncoder().encode(TOKEN_METADATA_PROGRAM_ADDRESS),
      getAddressEncoder().encode(checkedAddress(mint))
    ]
  }))[0];
}

export { CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR, TOKEN_METADATA_PROGRAM_ADDRESS, TokenMetadataAccount, TokenMetadataInstruction, UseMethod, collectionDetails, getAccountMetaFactory, getCollectionCodec, getCollectionDecoder, getCollectionDetailsCodec, getCollectionDetailsDecoder, getCollectionDetailsEncoder, getCollectionEncoder, getCreateMetadataAccountV3DiscriminatorBytes, getCreateMetadataAccountV3Instruction, getCreateMetadataAccountV3InstructionDataCodec, getCreateMetadataAccountV3InstructionDataDecoder, getCreateMetadataAccountV3InstructionDataEncoder, getCreatorCodec, getCreatorDecoder, getCreatorEncoder, getDataV2Codec, getDataV2Decoder, getDataV2Encoder, getTokenMetadataAddress, getUseMethodCodec, getUseMethodDecoder, getUseMethodEncoder, getUsesCodec, getUsesDecoder, getUsesEncoder, isCollectionDetails, parseCreateMetadataAccountV3Instruction };
//# sourceMappingURL=chunk-BN6CXGII.node.mjs.map
//# sourceMappingURL=chunk-BN6CXGII.node.mjs.map